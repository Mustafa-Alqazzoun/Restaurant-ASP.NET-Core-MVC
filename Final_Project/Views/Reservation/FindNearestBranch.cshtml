@* @model Final_Project.Controllers.NearestBranchViewModel *@

@* @{ *@
@*     ViewData["Title"] = "Find Nearest Branch"; *@
@* } *@

@* <h2>Find Nearest Branch</h2> *@
@* <p class="mt-2">This feature uses your location to find the nearest branch. Please enable location services.</p> *@
@* <div id="map" style="height: 500px;"></div> *@
@* <div id="route-info" class="mt-3"></div> *@

@* @section Scripts { *@
@*     <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" /> *@
@*     <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script> *@
@*     <style> *@
@*         <text> *@
@*         .user-marker div { *@
@*             animation: pulse 2s infinite; *@
@*         } *@
@*         @@keyframes pulse { *@
@*             0% { transform: scale(1); } *@
@*             50% { transform: scale(1.2); } *@
@*             100% { transform: scale(1); } *@
@*         } *@
@*         .step-marker span { *@
@*             display: inline-block; *@
@*             width: 20px; *@
@*             height: 20px; *@
@*             background-color: red; *@
@*             color: white; *@
@*             text-align: center; *@
@*             border-radius: 50%; *@
@*             font-weight: bold; *@
@*         } *@
@*         </text> *@
@*     </style> *@
@*     <script> *@
@*         // Initialize map centered on Sheikh Zayed City, Egypt *@
@*         var map = L.map('map').setView([30.0550, 31.0000], 11); *@

@*         // Add OpenStreetMap tiles *@
@*         L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { *@
@*             attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>' *@
@*         }).addTo(map); *@

@*         var userMarker = null; *@
@*         var routeLayer = null; *@
@*         var stepMarkers = []; *@

@*         // Function to calculate distance using Haversine formula *@
@*         function calculateDistance(lat1, lon1, lat2, lon2) { *@
@*             var R = 6371; // Earth's radius in km *@
@*             var dLat = (lat2 - lat1) * Math.PI / 180; *@
@*             var dLon = (lon2 - lon1) * Math.PI / 180; *@
@*             var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + *@
@*                     Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * *@
@*                     Math.sin(dLon / 2) * Math.sin(dLon / 2); *@
@*             var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); *@
@*             return R * c; *@
@*         } *@

@*         // Function to fetch route and display navigation *@
@*         function fetchRoute(startLat, startLon, endLat, endLon, nearestBranch) { *@
@*             var apiKey = '5b3ce3597851110001cf6248bede1bf672b045fb88d11f7df6f8c1b9'; *@
@*             var url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${startLon},${startLat}&end=${endLon},${endLat}`; *@

@*             fetch(url) *@
@*                 .then(response => response.json()) *@
@*                 .then(data => { *@
@*                     if (data.features && data.features.length > 0) { *@
@*                         // Clear previous route *@
@*                         if (routeLayer) { *@
@*                             map.removeLayer(routeLayer); *@
@*                         } *@
@*                         stepMarkers.forEach(marker => map.removeLayer(marker)); *@
@*                         stepMarkers = []; *@

@*                         // Draw route *@
@*                         var route = data.features[0].geometry.coordinates; *@
@*                         var routeLatLngs = route.map(coord => [coord[1], coord[0]]); *@
@*                         routeLayer = L.polyline(routeLatLngs, {color: 'green', weight: 5}).addTo(map); *@

@*                         // Add turn-by-turn markers *@
@*                         var steps = data.features[0].properties.segments[0].steps; *@
@*                         steps.forEach((step, index) => { *@
@*                             var stepCoord = routeLatLngs[step.way_points[0]]; // Approximate step position *@
@*                             var marker = L.marker(stepCoord, { *@
@*                                 icon: L.divIcon({ *@
@*                                     className: 'step-marker', *@
@*                                     html: `<span>${index + 1}</span>`, *@
@*                                     iconSize: [20, 20] *@
@*                                 }) *@
@*                             }).addTo(map) *@
@*                               .bindPopup(`${step.instruction}<br>Distance: ${(step.distance / 1000).toFixed(2)} km`); *@
@*                             stepMarkers.push(marker); *@
@*                         }); *@

@*                         // Fit map to route bounds *@
@*                         map.fitBounds(routeLayer.getBounds()); *@

@*                         // Add button to open in Google Maps *@
@*                         var googleMapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startLat},${startLon}&destination=${endLat},${endLon}&travelmode=driving`; *@
@*                         document.getElementById('route-info').innerHTML = ` *@
@*                             <h4>Nearest Branch: ${nearestBranch.name}</h4> *@
@*                             <p>Address: ${nearestBranch.address}</p> *@
@*                             <p>Contact: ${nearestBranch.contactNumber}</p> *@
@*                             <p>Distance: ${minDistance.toFixed(2)} km</p> *@
@*                             <a href="${googleMapsUrl}" target="_blank" class="btn btn-primary">Open in Google Maps for Navigation</a> *@
@*                             <div id="route-directions"></div> *@
@*                         `; *@
@*                     } *@
@*                 }) *@
@*                 .catch(error => { *@
@*                     console.error('Error fetching route:', error); *@
@*                     document.getElementById('route-info').innerHTML += '<p>Unable to fetch route.</p>'; *@
@*                 }); *@
@*         } *@

@*         // Track user location in real-time *@
@*         if (navigator.geolocation) { *@
@*             navigator.geolocation.getCurrentPosition(function(position) { *@
@*                 var userLat = position.coords.latitude; *@
@*                 var userLon = position.coords.longitude; *@

@*                 // Initial user marker *@
@*                 userMarker = L.marker([userLat, userLon], { *@
@*                     icon: L.divIcon({ *@
@*                         className: 'user-marker', *@
@*                         html: '<div style="background-color: blue; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;"></div>', *@
@*                         iconSize: [15, 15] *@
@*                     }) *@
@*                 }).addTo(map) *@
@*                   .bindPopup('Your Location').openPopup(); *@

@*                 // Add 10km buffer *@
@*                 L.circle([userLat, userLon], { *@
@*                     radius: 10000, *@
@*                     color: 'blue', *@
@*                     fillOpacity: 0.1 *@
@*                 }).addTo(map); *@

@*                 // Process branches *@
@*                 var branches = @Html.Raw(Json.Serialize(Model.Branches)); *@
@*                 var nearestBranch = null; *@
@*                 var minDistance = Infinity; *@

@*                 branches.forEach(function(branch) { *@
@*                     var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude); *@
@*                     if (distance <= 10 && distance < minDistance) { *@
@*                         minDistance = distance; *@
@*                         nearestBranch = branch; *@
@*                     } *@

@*                     L.marker([branch.latitude, branch.longitude]).addTo(map) *@
@*                         .bindPopup(`${branch.name}<br>${branch.address}<br>${branch.contactNumber}`); *@
@*                 }); *@

@*                 // Display nearest branch and route *@
@*                 if (nearestBranch) { *@
@*                     document.getElementById('route-info').innerHTML = ` *@
@*                         <h4>Nearest Branch: ${nearestBranch.name}</h4> *@
@*                         <p>Address: ${nearestBranch.address}</p> *@
@*                         <p>Contact: ${nearestBranch.contactNumber}</p> *@
@*                         <p>Distance: ${minDistance.toFixed(2)} km</p> *@
@*                         <div id="route-directions"></div> *@
@*                     `; *@
@*                     fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch); *@
@*                 } else { *@
@*                     document.getElementById('route-info').innerHTML = '<p>No branches found within 10km.</p>'; *@
@*                 } *@

@*                 // Center map on user *@
@*                 map.setView([userLat, userLon], 12); *@

@*                 // Watch position for real-time updates *@
@*                 navigator.geolocation.watchPosition(function(position) { *@
@*                     userLat = position.coords.latitude; *@
@*                     userLon = position.coords.longitude; *@

@*                     // Update user marker *@
@*                     if (userMarker) { *@
@*                         userMarker.setLatLng([userLat, userLon]); *@
@*                     } *@

@*                     // Recalculate nearest branch and route *@
@*                     minDistance = Infinity; *@
@*                     nearestBranch = null; *@

@*                     branches.forEach(function(branch) { *@
@*                         var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude); *@
@*                         if (distance <= 10 && distance < minDistance) { *@
@*                             minDistance = distance; *@
@*                             nearestBranch = branch; *@
@*                         } *@
@*                     }); *@

@*                     if (nearestBranch) { *@
@*                         fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch); *@
@*                     } *@
@*                 }, function(error) { *@
@*                     console.error('Geolocation watch error:', error); *@
@*                 }, { *@
@*                     enableHighAccuracy: true, *@
@*                     timeout: 5000, *@
@*                     maximumAge: 0 *@
@*                 }); *@
@*             }, function() { *@
@*                 document.getElementById('route-info').innerHTML = '<p>Unable to retrieve your location. Please enable location services.</p>'; *@
@*             }); *@
@*         } else { *@
@*             document.getElementById('route-info').innerHTML = '<p>Geolocation is not supported by your browser.</p>'; *@
@*         } *@
@*     </script> *@
@* } *@



@* @model Final_Project.Controllers.NearestBranchViewModel *@
@* @{ *@
@*     ViewData["Title"] = "Find Nearest Branch"; *@
@* } *@

@* <div class="row mb-4"> *@
@*     <div class="col"> *@
@*         <h2>Find Nearest Branch</h2> *@
@*         <p class="text-muted">Enable location services to find the nearest branch.</p> *@
@*     </div> *@
@* </div> *@

@* <div class="row"> *@
@*     <div class="col-12 col-lg-8"> *@
@*         <div id="map" class="border rounded" style="height: 500px;"></div> *@
@*     </div> *@
@*     <div class="col-12 col-lg-4"> *@
@*         <div class="card mt-3 mt-lg-0"> *@
@*             <div class="card-body"> *@
@*                 <div id="route-info" class="route-info"> *@
@*                     <p class="text-muted">Waiting for location...</p> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

@* @section Scripts { *@
@*     <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" /> *@
@*     <style> *@
@*         #map { *@
@*             width: 100%; *@
@*         } *@

@*         .user-marker div { *@
@*             animation: pulse 2s infinite; *@
@*         } *@
@*         @@keyframes pulse { *@
@*             0% *@

@*         { *@
@*             transform: scale(1); *@
@*         } *@

@*         50% { *@
@*             transform: scale(1.2); *@
@*         } *@

@*         100% { *@
@*             transform: scale(1); *@
@*         } *@

@*         } *@

@*         .step-marker span { *@
@*             display: inline-block; *@
@*             width: 20px; *@
@*             height: 20px; *@
@*             background-color: #dc3545; *@
@*             color: white; *@
@*             text-align: center; *@
@*             border-radius: 50%; *@
@*             font-weight: bold; *@
@*         } *@

@*         .route-info p { *@
@*             margin-bottom: 0.5rem; *@
@*         } *@

@*         .spinner { *@
@*             display: none; *@
@*             text-align: center; *@
@*             padding: 20px; *@
@*         } *@
@*     </style> *@
@*     <script> *@
@*         var map = L.map('map').setView([30.0550, 31.0000], 11); *@
@*         L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { *@
@*             attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>', *@
@*             ariaLabel: 'Map showing branches and user location' *@
@*         }).addTo(map); *@

@*         var userMarker = null; *@
@*         var routeLayer = null; *@
@*         var stepMarkers = []; *@

@*         function calculateDistance(lat1, lon1, lat2, lon2) { *@
@*             var R = 6371; *@
@*             var dLat = (lat2 - lat1) * Math.PI / 180; *@
@*             var dLon = (lon2 - lon1) * Math.PI / 180; *@
@*             var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + *@
@*                     Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * *@
@*                     Math.sin(dLon / 2) * Math.sin(dLon / 2); *@
@*             var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); *@
@*             return R * c; *@
@*         } *@

@*         function fetchRoute(startLat, startLon, endLat, endLon, nearestBranch) { *@
@*             document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>'; *@
@*             var apiKey = 'YOUR_API_KEY'; // Replace with secure key management *@
@*             var url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${startLon},${startLat}&end=${endLon},${endLat}`; *@

@*             fetch(url) *@
@*                 .then(response => response.json()) *@
@*                 .then(data => { *@
@*                     if (data.features && data.features.length > 0) { *@
@*                         if (routeLayer) map.removeLayer(routeLayer); *@
@*                         stepMarkers.forEach(marker => map.removeLayer(marker)); *@
@*                         stepMarkers = []; *@

@*                         var route = data.features[0].geometry.coordinates; *@
@*                         var routeLatLngs = route.map(coord => [coord[1], coord[0]]); *@
@*                         routeLayer = L.polyline(routeLatLngs, { color: '#28a745', weight: 5 }).addTo(map); *@

@*                         var steps = data.features[0].properties.segments[0].steps; *@
@*                         steps.forEach((step, index) => { *@
@*                             var stepCoord = routeLatLngs[step.way_points[0]]; *@
@*                             var marker = L.marker(stepCoord, { *@
@*                                 icon: L.divIcon({ *@
@*                                     className: 'step-marker', *@
@*                                     html: `<span>${index + 1}</span>`, *@
@*                                     iconSize: [20, 20] *@
@*                                 }) *@
@*                             }).addTo(map) *@
@*                               .bindPopup(`${step.instruction}<br>Distance: ${(step.distance / 1000).toFixed(2)} km`, { ariaLabel: `Step ${index + 1}` }); *@
@*                             stepMarkers.push(marker); *@
@*                         }); *@

@*                         map.fitBounds(routeLayer.getBounds()); *@

@*                         var googleMapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startLat},${startLon}&destination=${endLat},${endLon}&travelmode=driving`; *@
@*                         document.getElementById('route-info').innerHTML = ` *@
@*                             <h4 class="card-title">${nearestBranch.name}</h4> *@
@*                             <p><strong>Address:</strong> ${nearestBranch.address}</p> *@
@*                             <p><strong>Contact:</strong> ${nearestBranch.contactNumber}</p> *@
@*                             <p><strong>Distance:</strong> ${minDistance.toFixed(2)} km</p> *@
@*                             <a href="${googleMapsUrl}" target="_blank" class="btn btn-primary" aria-label="Open route in Google Maps">Navigate with Google Maps</a> *@
@*                         `; *@
@*                     } else { *@
@*                         document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No route found.</div>'; *@
@*                     } *@
@*                 }) *@
@*                 .catch(error => { *@
@*                     console.error('Error fetching route:', error); *@
@*                     document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to fetch route. Please try again.</div>'; *@
@*                 }); *@
@*         } *@

@*         if (navigator.geolocation) { *@
@*             navigator.geolocation.getCurrentPosition(function(position) { *@
@*                 var userLat = position.coords.latitude; *@
@*                 var userLon = position.coords.longitude; *@

@*                 userMarker = L.marker([userLat, userLon], { *@
@*                     icon: L.divIcon({ *@
@*                         className: 'user-marker', *@
@*                         html: '<div style="background-color: #007bff; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;"></div>', *@
@*                         iconSize: [15, 15] *@
@*                     }) *@
@*                 }).addTo(map) *@
@*                   .bindPopup('Your Location', { ariaLabel: 'Your current location' }).openPopup(); *@

@*                 L.circle([userLat, userLon], { *@
@*                     radius: 10000, *@
@*                     color: '#007bff', *@
@*                     fillOpacity: 0.1 *@
@*                 }).addTo(map); *@

@*                 var branches = @Html.Raw(Json.Serialize(Model.Branches)); *@
@*                 var nearestBranch = null; *@
@*                 var minDistance = Infinity; *@

@*                 branches.forEach(function(branch) { *@
@*                     var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude); *@
@*                     if (distance <= 10 && distance < minDistance) { *@
@*                         minDistance = distance; *@
@*                         nearestBranch = branch; *@
@*                     } *@
@*                     L.marker([branch.latitude, branch.longitude]).addTo(map) *@
@*                         .bindPopup(`${branch.name}<br>${branch.address}<br>${branch.contactNumber}`, { ariaLabel: `Branch: ${branch.name}` }); *@
@*                 }); *@

@*                 if (nearestBranch) { *@
@*                     document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>'; *@
@*                     fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch); *@
@*                 } else { *@
@*                     document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No branches found within 10km.</div>'; *@
@*                 } *@

@*                 map.setView([userLat, userLon], 12); *@

@*                 navigator.geolocation.watchPosition(function(position) { *@
@*                     userLat = position.coords.latitude; *@
@*                     userLon = position.coords.longitude; *@

@*                     if (userMarker) { *@
@*                         userMarker.setLatLng([userLat, userLon]); *@
@*                     } *@

@*                     minDistance = Infinity; *@
@*                     nearestBranch = null; *@

@*                     branches.forEach(function(branch) { *@
@*                         var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude); *@
@*                         if (distance <= 10 && distance < minDistance) { *@
@*                             minDistance = distance; *@
@*                             nearestBranch = branch; *@
@*                         } *@
@*                     }); *@

@*                     if (nearestBranch) { *@
@*                         fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch); *@
@*                     } *@
@*                 }, function(error) { *@
@*                     console.error('Geolocation watch error:', error); *@
@*                     document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to update location. Please check location settings.</div>'; *@
@*                 }, { *@
@*                     enableHighAccuracy: true, *@
@*                     timeout: 5000, *@
@*                     maximumAge: 0 *@
@*                 }); *@
@*             }, function() { *@
@*                 document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to retrieve your location. Please enable location services.</div>'; *@
@*             }); *@
@*         } else { *@
@*             document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Geolocation is not supported by your browser.</div>'; *@
@*         } *@
@*     </script> *@
@* } *@

@* @model Final_Project.Controllers.NearestBranchViewModel *@

@* @{ *@
@*     ViewData["Title"] = "Find Nearest Branch"; *@
@*     Layout = null; // Remove default layout to exclude the sidebar *@
@* } *@

@* <!DOCTYPE html> *@
@* <html lang="en"> *@
@* <head> *@
@*     <meta charset="utf-8" /> *@
@*     <meta name="viewport" content="width=device-width, initial-scale=1.0" /> *@
@*     <title>@ViewData["Title"] - Restaurant Reservation</title> *@
@*     <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" /> *@
@*     <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" /> *@
@*     <style> *@
@*         /* Page background with restaurant image */ *@
@*         body { *@
@*             background-image: url('https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?q=80&w=1920&auto=format&fit=crop'); *@
@*             background-size: cover; *@
@*             background-position: center; *@
@*             background-repeat: no-repeat; *@
@*             background-attachment: fixed; *@
@*             min-height: 100vh; *@
@*             margin: 0; *@
@*             padding: 2rem; *@
@*             display: flex; *@
@*             flex-direction: column; *@
@*             align-items: center; *@
@*             position: relative; *@
@*             font-family: 'Georgia', serif; /* Elegant serif font */ *@
@*         } *@

@*             /* Subtle overlay for twilight glow effect */ *@
@*             body::before { *@
@*                 content: ''; *@
@*                 position: absolute; *@
@*                 top: 0; *@
@*                 left: 0; *@
@*                 width: 100%; *@
@*                 height: 100%; *@
@*                 background: linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.2) 100%); /* Gradient overlay */ *@
@*                 z-index: 1; *@
@*             } *@

@*         /* Enhanced card container with gradient and shadow */ *@
@*         .card-container { *@
@*             background: linear-gradient(135deg, #ffffff 0%, #f9f1e7 100%); /* Soft ivory gradient */ *@
@*             padding: 2rem; *@
@*             border-radius: 15px; *@
@*             box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); *@
@*             width: 100%; *@
@*             max-width: 1200px; *@
@*             position: relative; *@
@*             z-index: 2; *@
@*             margin-bottom: 2rem; *@
@*             border: 2px solid #d4a373; /* Warm gold border */ *@
@*             overflow: hidden; *@
@*         } *@

@*             /* Yellow zigzag border effect with refinement */ *@
@*             .card-container::before { *@
@*                 content: ''; *@
@*                 position: absolute; *@
@*                 top: -15px; *@
@*                 left: -15px; *@
@*                 right: -15px; *@
@*                 height: 30px; *@
@*                 background: linear-gradient(45deg, #d4a373 25%, transparent 25%, transparent 50%, #d4a373 50%, #d4a373 75%, transparent 75%, transparent); *@
@*                 background-size: 40px 40px; *@
@*                 z-index: 3; *@
@*             } *@

@*             .card-container::after { *@
@*                 content: ''; *@
@*                 position: absolute; *@
@*                 bottom: -15px; *@
@*                 left: -15px; *@
@*                 right: -15px; *@
@*                 height: 30px; *@
@*                 background: linear-gradient(45deg, #d4a373 25%, transparent 25%, transparent 50%, #d4a373 50%, #d4a373 75%, transparent 75%, transparent); *@
@*                 background-size: 40px 40px; *@
@*                 z-index: 3; *@
@*             } *@

@*         /* Enhanced card title */ *@
@*         .card-title { *@
@*             color: #2f4f4f; /* Dark slate gray for elegance */ *@
@*             font-size: 2rem; *@
@*             font-weight: 700; *@
@*             margin-bottom: 1rem; *@
@*             text-transform: uppercase; *@
@*             letter-spacing: 2px; *@
@*             position: relative; *@
@*         } *@

@*             .card-title::after { *@
@*                 content: ''; *@
@*                 position: absolute; *@
@*                 bottom: -10px; *@
@*                 left: 50%; *@
@*                 transform: translateX(-50%); *@
@*                 width: 50px; *@
@*                 height: 3px; *@
@*                 background: #d4a373; *@
@*             } *@

@*         /* Text muted */ *@
@*         .text-muted { *@
@*             color: #2f4f4f !important; *@
@*             font-size: 1.1rem; *@
@*             margin-bottom: 1.5rem; *@
@*         } *@

@*         /* Map and route info layout */ *@
@*         .map-container, .route-container { *@
@*             width: 100%; *@
@*         } *@

@*         #map { *@
@*             height: 500px; *@
@*             border-radius: 8px; *@
@*             border: 2px solid #d4a373; *@
@*             margin-bottom: 2rem; *@
@*         } *@

@*         .route-info { *@
@*             background: rgba(255, 255, 255, 0.9); *@
@*             padding: 1.5rem; *@
@*             border-radius: 8px; *@
@*         } *@

@*             .route-info p { *@
@*                 margin-bottom: 0.5rem; *@
@*                 color: #2f4f4f; *@
@*             } *@

@*             .route-info h4 { *@
@*                 color: #2f4f4f; *@
@*                 font-size: 1.5rem; *@
@*                 font-weight: 600; *@
@*                 margin-bottom: 1rem; *@
@*             } *@

@*         /* Button styling */ *@
@*         .btn-primary { *@
@*             background: linear-gradient(135deg, #d4a373 0%, #8b4513 100%); *@
@*             border: none; *@
@*             padding: 0.75rem 1.5rem; *@
@*             border-radius: 8px; *@
@*             font-size: 1rem; *@
@*             font-weight: 600; *@
@*             color: white; *@
@*             text-transform: uppercase; *@
@*             transition: transform 0.3s, box-shadow 0.3s; *@
@*         } *@

@*             .btn-primary:hover { *@
@*                 transform: translateY(-2px); *@
@*                 box-shadow: 0 4px 12px rgba(139, 69, 19, 0.4); *@
@*             } *@

@*         /* Alerts */ *@
@*         .alert-warning, .alert-danger { *@
@*             background-color: rgba(255, 193, 7, 0.1); *@
@*             border-left: 4px solid #d4a373; *@
@*             border-radius: 5px; *@
@*             padding: 1rem; *@
@*             margin-bottom: 1rem; *@
@*         } *@

@*         .alert-danger { *@
@*             background-color: rgba(220, 53, 69, 0.1); *@
@*             border-left: 4px solid #dc3545; *@
@*         } *@

@*         /* Spinner */ *@
@*         .spinner { *@
@*             display: none; *@
@*             text-align: center; *@
@*             padding: 20px; *@
@*         } *@

@*         .spinner-border { *@
@*             border-color: #d4a373; *@
@*             border-right-color: transparent; *@
@*         } *@

@*         /* User marker animation */ *@
@*         .user-marker div { *@
@*             animation: pulse 2s infinite; *@
@*         } *@

@*         @@keyframes pulse { *@
@*             0% *@

@*         { *@
@*             transform: scale(1); *@
@*         } *@

@*         50% { *@
@*             transform: scale(1.2); *@
@*         } *@

@*         100% { *@
@*             transform: scale(1); *@
@*         } *@

@*         } *@

@*         /* Step marker styling */ *@
@*         .step-marker span { *@
@*             display: inline-block; *@
@*             width: 20px; *@
@*             height: 20px; *@
@*             background-color: #dc3545; *@
@*             color: white; *@
@*             text-align: center; *@
@*             border-radius: 50%; *@
@*             font-weight: bold; *@
@*         } *@
@*     </style> *@
@* </head> *@
@* <body> *@
@*     <div class="card-container"> *@
@*         <h2 class="card-title">Find Nearest Branch</h2> *@
@*         <p class="text-muted">Enable location services to find the nearest branch.</p> *@

@*         <div class="map-container"> *@
@*             <div id="map"></div> *@
@*         </div> *@
@*         <div class="route-container"> *@
@*             <div id="route-info" class="route-info"> *@
@*                 <p class="text-muted">Waiting for location...</p> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@

@*     <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script> *@
@*     <script src="~/lib/jquery/dist/jquery.min.js"></script> *@
@*     <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script> *@
@*     <script> *@
@*         var map = L.map('map').setView([30.0550, 31.0000], 11); *@
@*         L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { *@
@*             attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>', *@
@*             ariaLabel: 'Map showing branches and user location' *@
@*         }).addTo(map); *@

@*         var userMarker = null; *@
@*         var routeLayer = null; *@
@*         var stepMarkers = []; *@

@*         function calculateDistance(lat1, lon1, lat2, lon2) { *@
@*             var R = 6371; *@
@*             var dLat = (lat2 - lat1) * Math.PI / 180; *@
@*             var dLon = (lon2 - lon1) * Math.PI / 180; *@
@*             var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + *@
@*                     Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * *@
@*                     Math.sin(dLon / 2) * Math.sin(dLon / 2); *@
@*             var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); *@
@*             return R * c; *@
@*         } *@

@*         function fetchRoute(startLat, startLon, endLat, endLon, nearestBranch) { *@
@*             document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>'; *@
@*             var apiKey = 'YOUR_API_KEY'; // Replace with secure key management *@
@*             var url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${startLon},${startLat}&end=${endLon},${endLat}`; *@

@*             fetch(url) *@
@*                 .then(response => response.json()) *@
@*                 .then(data => { *@
@*                     if (data.features && data.features.length > 0) { *@
@*                         if (routeLayer) map.removeLayer(routeLayer); *@
@*                         stepMarkers.forEach(marker => map.removeLayer(marker)); *@
@*                         stepMarkers = []; *@

@*                         var route = data.features[0].geometry.coordinates; *@
@*                         var routeLatLngs = route.map(coord => [coord[1], coord[0]]); *@
@*                         routeLayer = L.polyline(routeLatLngs, { color: '#28a745', weight: 5 }).addTo(map); *@

@*                         var steps = data.features[0].properties.segments[0].steps; *@
@*                         steps.forEach((step, index) => { *@
@*                             var stepCoord = routeLatLngs[step.way_points[0]]; *@
@*                             var marker = L.marker(stepCoord, { *@
@*                                 icon: L.divIcon({ *@
@*                                     className: 'step-marker', *@
@*                                     html: `<span>${index + 1}</span>`, *@
@*                                     iconSize: [20, 20] *@
@*                                 }) *@
@*                             }).addTo(map) *@
@*                               .bindPopup(`${step.instruction}<br>Distance: ${(step.distance / 1000).toFixed(2)} km`, { ariaLabel: `Step ${index + 1}` }); *@
@*                             stepMarkers.push(marker); *@
@*                         }); *@

@*                         map.fitBounds(routeLayer.getBounds()); *@

@*                         var googleMapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startLat},${startLon}&destination=${endLat},${endLon}&travelmode=driving`; *@
@*                         document.getElementById('route-info').innerHTML = ` *@
@*                             <h4 class="card-title">${nearestBranch.name}</h4> *@
@*                             <p><strong>Address:</strong> ${nearestBranch.address}</p> *@
@*                             <p><strong>Contact:</strong> ${nearestBranch.contactNumber}</p> *@
@*                             <p><strong>Distance:</strong> ${minDistance.toFixed(2)} km</p> *@
@*                             <a href="${googleMapsUrl}" target="_blank" class="btn btn-primary" aria-label="Open route in Google Maps">Navigate with Google Maps</a> *@
@*                         `; *@
@*                     } else { *@
@*                         document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No route found.</div>'; *@
@*                     } *@
@*                 }) *@
@*                 .catch(error => { *@
@*                     console.error('Error fetching route:', error); *@
@*                     document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to fetch route. Please try again.</div>'; *@
@*                 }); *@
@*         } *@

@*         if (navigator.geolocation) { *@
@*             navigator.geolocation.getCurrentPosition(function(position) { *@
@*                 var userLat = position.coords.latitude; *@
@*                 var userLon = position.coords.longitude; *@

@*                 userMarker = L.marker([userLat, userLon], { *@
@*                     icon: L.divIcon({ *@
@*                         className: 'user-marker', *@
@*                         html: '<div style="background-color: #007bff; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;"></div>', *@
@*                         iconSize: [15, 15] *@
@*                     }) *@
@*                 }).addTo(map) *@
@*                   .bindPopup('Your Location', { ariaLabel: 'Your current location' }).openPopup(); *@

@*                 L.circle([userLat, userLon], { *@
@*                     radius: 10000, *@
@*                     color: '#007bff', *@
@*                     fillOpacity: 0.1 *@
@*                 }).addTo(map); *@

@*                 var branches = @Html.Raw(Json.Serialize(Model.Branches)); *@
@*                 var nearestBranch = null; *@
@*                 var minDistance = Infinity; *@

@*                 branches.forEach(function(branch) { *@
@*                     var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude); *@
@*                     if (distance <= 10 && distance < minDistance) { *@
@*                         minDistance = distance; *@
@*                         nearestBranch = branch; *@
@*                     } *@
@*                     L.marker([branch.latitude, branch.longitude]).addTo(map) *@
@*                         .bindPopup(`${branch.name}<br>${branch.address}<br>${branch.contactNumber}`, { ariaLabel: `Branch: ${branch.name}` }); *@
@*                 }); *@

@*                 if (nearestBranch) { *@
@*                     document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>'; *@
@*                     fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch); *@
@*                 } else { *@
@*                     document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No branches found within 10km.</div>'; *@
@*                 } *@

@*                 map.setView([userLat, userLon], 12); *@

@*                 navigator.geolocation.watchPosition(function(position) { *@
@*                     userLat = position.coords.latitude; *@
@*                     userLon = position.coords.longitude; *@

@*                     if (userMarker) { *@
@*                         userMarker.setLatLng([userLat, userLon]); *@
@*                     } *@

@*                     minDistance = Infinity; *@
@*                     nearestBranch = null; *@

@*                     branches.forEach(function(branch) { *@
@*                         var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude); *@
@*                         if (distance <= 10 && distance < minDistance) { *@
@*                             minDistance = distance; *@
@*                             nearestBranch = branch; *@
@*                         } *@
@*                     }); *@

@*                     if (nearestBranch) { *@
@*                         fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch); *@
@*                     } *@
@*                 }, function(error) { *@
@*                     console.error('Geolocation watch error:', error); *@
@*                     document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to update location. Please check location settings.</div>'; *@
@*                 }, { *@
@*                     enableHighAccuracy: true, *@
@*                     timeout: 5000, *@
@*                     maximumAge: 0 *@
@*                 }); *@
@*             }, function() { *@
@*                 document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to retrieve your location. Please enable location services.</div>'; *@
@*             }); *@
@*         } else { *@
@*             document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Geolocation is not supported by your browser.</div>'; *@
@*         } *@
@*     </script> *@
@* </body> *@
@* </html> *@

@*  @model Final_Project.Controllers.NearestBranchViewModel  *@
@*  @{  *@
@*      ViewData["Title"] = "Find Nearest Branch";  *@
@*      // Layout = null; Remove default layout to exclude the sidebar *@
@*  }  *@

@* <!DOCTYPE html> *@
@* <html lang="en"> *@
@* <head> *@
@*     <meta charset="utf-8" /> *@
@*     <meta name="viewport" content="width=device-width, initial-scale=1.0" /> *@
@*     <title>@ViewData["Title"] - Restaurant Reservation</title> *@
@*     <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" /> *@
@*     <link rel="stylesheet" href="~/css/site.css" /> *@
@* </head> *@
@* <body> *@
@*     <div class="page-wrapper"> *@
@*         <div class="card-container"> *@
@*             <h2 class="card-title">Find Nearest Branch</h2> *@

@*             @if (Model.Branches.Any()) *@
@*             { *@
@*                 <div id="branch-list"> *@
@*                     @foreach (var branch in Model.Branches) *@
@*                     { *@
@*                         <div class="card-body" data-branch-id="@branch.BranchID"> *@
@*                             <p class="card-text"><strong>Branch:</strong> @branch.Name</p> *@
@*                             <p class="card-text"><strong>Address:</strong> @branch.Address</p> *@
@*                             <p class="card-text"><strong>Contact:</strong> @branch.ContactNumber</p> *@
@*                             <p class="card-text"><strong>Distance:</strong> <span class="distance" data-lat="@branch.Latitude" data-lon="@branch.Longitude">Calculating...</span></p> *@
@*                         </div> *@
@*                     } *@
@*                 </div> *@
@*             } *@
@*             else *@
@*             { *@
@*                 <p class="no-branches">No branches found.</p> *@
@*             } *@

@*             <div class="error-message" id="error-message"></div> *@

@*             <div class="action-buttons"> *@
@*                 <a asp-action="ShowAllReservations" class="btn btn-primary" aria-label="Back to all reservations">Back to Reservations</a> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@

@*     @Html.AntiForgeryToken() *@
@*     <script src="~/lib/jquery/dist/jquery.min.js"></script> *@
@*     <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script> *@
@*     <script> *@
@*         $(document).ready(function () { *@
@*             if (navigator.geolocation) { *@
@*                 navigator.geolocation.getCurrentPosition( *@
@*                     function (position) { *@
@*                         const userLat = position.coords.latitude; *@
@*                         const userLon = position.coords.longitude; *@

@*                         let nearestDistance = Number.MAX_VALUE; *@
@*                         let nearestBranchId = null; *@

@*                         $('.distance').each(function () { *@
@*                             const branchLat = parseFloat($(this).data('lat')); *@
@*                             const branchLon = parseFloat($(this).data('lon')); *@

@*                             $.ajax({ *@
@*                                 url: '/Reservation/CalculateDistance', *@
@*                                 type: 'POST', *@
@*                                 data: { *@
@*                                     lat1: userLat, *@
@*                                     lon1: userLon, *@
@*                                     lat2: branchLat, *@
@*                                     lon2: branchLon, *@
@*                                     __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() *@
@*                                 }, *@
@*                                 success: function (distance) { *@
@*                                     $(this).text(distance.toFixed(2) + ' km'); *@
@*                                     if (distance < nearestDistance) { *@
@*                                         nearestDistance = distance; *@
@*                                         nearestBranchId = $(this).closest('.card-body').data('branch-id'); *@
@*                                         $('.card-body').removeClass('nearest'); *@
@*                                         $(this).closest('.card-body').addClass('nearest'); *@
@*                                     } *@
@*                                 }.bind(this), *@
@*                                 error: function (xhr, status, error) { *@
@*                                     console.error('AJAX error:', status, error, xhr.responseText); *@
@*                                     $('#error-message').text('Unable to calculate distance. Please try again.').show(); *@
@*                                 } *@
@*                             }); *@
@*                         }); *@
@*                     }, *@
@*                     function (error) { *@
@*                         let errorMsg = 'Unable to fetch location. Please allow location access and try again.'; *@
@*                         if (error.code === error.PERMISSION_DENIED) { *@
@*                             errorMsg = 'Location access denied. Please enable location services.'; *@
@*                         } else if (error.code === error.POSITION_UNAVAILABLE) { *@
@*                             errorMsg = 'Location unavailable. Please check your device settings.'; *@
@*                         } else if (error.code === error.TIMEOUT) { *@
@*                             errorMsg = 'Location request timed out. Please try again.'; *@
@*                         } *@
@*                         $('#error-message').text(errorMsg).show(); *@
@*                     } *@
@*                 ); *@
@*             } else { *@
@*                 $('#error-message').text('Geolocation is not supported by your browser.').show(); *@
@*             } *@
@*         }); *@
@*     </script> *@
@* </body> *@
@* </html> *@


@* @model Final_Project.Controllers.NearestBranchViewModel *@

@* @{ *@
@*     ViewData["Title"] = "Find Nearest Branch"; *@
@*     Layout = "~/Views/Shared/_Layout.cshtml"; // Use the same layout as AddReservation *@
@* } *@

@* <div class="form-container"> *@
@*     <h2>Find Nearest Branch</h2> *@

@*     @if (Model.Branches.Any()) *@
@*     { *@
@*         <div id="branch-list"> *@
@*             @foreach (var branch in Model.Branches) *@
@*             { *@
@*                 <div class="branch-card" data-branch-id="@branch.BranchID"> *@
@*                     <div class="card-body"> *@
@*                         <p class="card-text"><strong>Branch:</strong> @branch.Name</p> *@
@*                         <p class="card-text"><strong>Address:</strong> @branch.Address</p> *@
@*                         <p class="card-text"><strong>Contact:</strong> @branch.ContactNumber</p> *@
@*                         <p class="card-text"><strong>Distance:</strong> <span class="distance" data-lat="@branch.Latitude" data-lon="@branch.Longitude">Calculating...</span></p> *@
@*                     </div> *@
@*                 </div> *@
@*             } *@
@*         </div> *@
@*     } *@
@*     else *@
@*     { *@
@*         <div class="alert alert-info" role="alert"> *@
@*             <p class="no-branches">No branches found.</p> *@
@*         </div> *@
@*     } *@

@*     <div class="alert alert-danger error-message" id="error-message" style="display: none;"></div> *@

@*     <div class="action-buttons"> *@
@*         <a asp-action="ShowAllReservations" class="btn btn-primary" aria-label="Back to all reservations">Back to Reservations</a> *@
@*     </div> *@
@* </div> *@

@* @section Scripts { *@
@*     @Html.AntiForgeryToken() *@
@*     <script src="~/lib/jquery/dist/jquery.min.js"></script> *@
@*     <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script> *@
@*     <script> *@
@*         $(document).ready(function () { *@
@*             if (navigator.geolocation) { *@
@*                 navigator.geolocation.getCurrentPosition( *@
@*                     function (position) { *@
@*                         const userLat = position.coords.latitude; *@
@*                         const userLon = position.coords.longitude; *@

@*                         let nearestDistance = Number.MAX_VALUE; *@
@*                         let nearestBranchId = null; *@

@*                         $('.distance').each(function () { *@
@*                             const branchLat = parseFloat($(this).data('lat')); *@
@*                             const branchLon = parseFloat($(this).data('lon')); *@

@*                             $.ajax({ *@
@*                                 url: '/Reservation/CalculateDistance', *@
@*                                 type: 'POST', *@
@*                                 data: { *@
@*                                     lat1: userLat, *@
@*                                     lon1: userLon, *@
@*                                     lat2: branchLat, *@
@*                                     lon2: branchLon, *@
@*                                     __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() *@
@*                                 }, *@
@*                                 success: function (distance) { *@
@*                                     $(this).text(distance.toFixed(2) + ' km'); *@
@*                                     if (distance < nearestDistance) { *@
@*                                         nearestDistance = distance; *@
@*                                         nearestBranchId = $(this).closest('.branch-card').data('branch-id'); *@
@*                                         $('.branch-card').removeClass('nearest'); *@
@*                                         $(this).closest('.branch-card').addClass('nearest'); *@
@*                                     } *@
@*                                 }.bind(this), *@
@*                                 error: function (xhr, status, error) { *@
@*                                     console.error('AJAX error:', status, error, xhr.responseText); *@
@*                                     $('#error-message').text('Unable to calculate distance. Please try again.').show(); *@
@*                                 } *@
@*                             }); *@
@*                         }); *@
@*                     }, *@
@*                     function (error) { *@
@*                         let errorMsg = 'Unable to fetch location. Please allow location access and try again.'; *@
@*                         if (error.code === error.PERMISSION_DENIED) { *@
@*                             errorMsg = 'Location access denied. Please enable location services.'; *@
@*                         } else if (error.code === error.POSITION_UNAVAILABLE) { *@
@*                             errorMsg = 'Location unavailable. Please check your device settings.'; *@
@*                         } else if (error.code === error.TIMEOUT) { *@
@*                             errorMsg = 'Location request timed out. Please try again.'; *@
@*                         } *@
@*                         $('#error-message').text(errorMsg).show(); *@
@*                     } *@
@*                 ); *@
@*             } else { *@
@*                 $('#error-message').text('Geolocation is not supported by your browser.').show(); *@
@*             } *@
@*         }); *@
@*     </script> *@
@* } *@

@* <style> *@
@*     body { *@
@*         background-image: url('https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?q=80&w=1920&auto=format&fit=crop'); *@
@*         background-size: cover; *@
@*         background-position: center; *@
@*         background-repeat: no-repeat; *@
@*         background-attachment: fixed; *@
@*         min-height: 100vh; *@
@*         margin: 0; *@
@*         display: flex; *@
@*         justify-content: center; *@
@*         align-items: center; *@
@*         position: relative; *@
@*         font-family: 'Georgia', serif; *@
@*     } *@

@*         body::before { *@
@*             content: ''; *@
@*             position: absolute; *@
@*             top: 0; *@
@*             left: 0; *@
@*             width: 100%; *@
@*             height: 100%; *@
@*             background: linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.2) 100%); *@
@*             z-index: 1; *@
@*         } *@

@*     .form-container { *@
@*         background: linear-gradient(135deg, #ffffff 0%, #f9f1e7 100%); *@
@*         padding: 2.5rem; *@
@*         border-radius: 15px; *@
@*         box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); *@
@*         max-width: 650px; *@
@*         width: 100%; *@
@*         position: relative; *@
@*         z-index: 2; *@
@*         margin: 2rem; *@
@*         border: 2px solid #d4a373; *@
@*         overflow: hidden; *@
@*     } *@

@*         .form-container::before { *@
@*             content: ''; *@
@*             position: absolute; *@
@*             top: -15px; *@
@*             left: -15px; *@
@*             right: -15px; *@
@*             height: 30px; *@
@*             background: linear-gradient(45deg, #d4a373 25%, transparent 25%, transparent 50%, #d4a373 50%, #d4a373 75%, transparent 75%, transparent); *@
@*             background-size: 40px 40px; *@
@*             z-index: 3; *@
@*         } *@

@*         .form-container::after { *@
@*             content: ''; *@
@*             position: absolute; *@
@*             bottom: -15px; *@
@*             left: -15px; *@
@*             right: -15px; *@
@*             height: 30px; *@
@*             background: linear-gradient(45deg, #d4a373 25%, transparent 25%, transparent 50%, #d4a373 50%, #d4a373 75%, transparent 75%, transparent); *@
@*             background-size: 40px 40px; *@
@*             z-index: 3; *@
@*         } *@

@*     h2 { *@
@*         color: #2f4f4f; *@
@*         text-align: center; *@
@*         font-size: 2rem; *@
@*         font-weight: 700; *@
@*         margin-bottom: 2rem; *@
@*         text-transform: uppercase; *@
@*         letter-spacing: 2px; *@
@*         position: relative; *@
@*     } *@

@*         h2::after { *@
@*             content: ''; *@
@*             position: absolute; *@
@*             bottom: -10px; *@
@*             left: 50%; *@
@*             transform: translateX(-50%); *@
@*             width: 50px; *@
@*             height: 3px; *@
@*             background: #d4a373; *@
@*         } *@

@*     .branch-card { *@
@*         background: rgba(255, 255, 255, 0.9); *@
@*         border: 2px solid #d4a373; *@
@*         border-radius: 8px; *@
@*         padding: 1.5rem; *@
@*         margin-bottom: 1.5rem; *@
@*         transition: box-shadow 0.3s; *@
@*     } *@

@*         .branch-card.nearest { *@
@*             border-color: #8b4513; *@
@*             box-shadow: 0 4px 12px rgba(139, 69, 19, 0.4); *@
@*         } *@

@*     .card-body { *@
@*         padding: 1rem; *@
@*     } *@

@*     .card-text { *@
@*         margin: 0.5rem 0; *@
@*         font-size: 1rem; *@
@*         color: #2f4f4f; *@
@*     } *@

@*         .card-text strong { *@
@*             font-weight: 600; *@
@*             color: #2f4f4f; *@
@*         } *@

@*     .alert-info { *@
@*         background-color: rgba(91, 192, 222, 0.1); *@
@*         border-left: 4px solid #5bc0de; *@
@*         border-radius: 5px; *@
@*         padding: 1rem; *@
@*         margin-bottom: 1.5rem; *@
@*         text-align: center; *@
@*     } *@

@*     .no-branches { *@
@*         font-size: 1.1rem; *@
@*         color: #2f4f4f; *@
@*     } *@

@*     .alert-danger { *@
@*         background-color: rgba(139, 0, 0, 0.1); *@
@*         border-left: 4px solid #8b0000; *@
@*         border-radius: 5px; *@
@*         padding: 1rem; *@
@*         margin-bottom: 1.5rem; *@
@*         text-align: center; *@
@*         color: #8b0000; *@
@*         font-size: 1.1rem; *@
@*     } *@

@*     .action-buttons { *@
@*         display: flex; *@
@*         gap: 1rem; *@
@*         justify-content: center; *@
@*         margin-top: 2rem; *@
@*     } *@

@*     .btn-primary { *@
@*         background: linear-gradient(135deg, #d4a373 0%, #8b4513 100%); *@
@*         border: none; *@
@*         padding: 0.9rem 1.2rem; *@
@*         border-radius: 8px; *@
@*         font-size: 1rem; *@
@*         font-weight: 600; *@
@*         color: white; *@
@*         text-transform: uppercase; *@
@*         transition: transform 0.3s, box-shadow 0.3s; *@
@*     } *@

@*         .btn-primary:hover { *@
@*             transform: translateY(-2px); *@
@*             box-shadow: 0 4px 12px rgba(139, 69, 19, 0.4); *@
@*         } *@
@* </style> *@


@* @model Final_Project.Controllers.NearestBranchViewModel *@

@* @{ *@
@*     ViewData["Title"] = "Find Nearest Branch"; *@
@*     Layout = "~/Views/Shared/_Layout.cshtml"; *@
@* } *@

@* <div class="form-container"> *@
@*     <h2>Find Nearest Branch</h2> *@
@*     <p class="text-muted">Enable location services to find the nearest branch.</p> *@

@*     @if (Model.Branches.Any()) *@
@*     { *@
@*         <div id="branch-list"> *@
@*             @foreach (var branch in Model.Branches) *@
@*             { *@
@*                 <div class="branch-card" data-branch-id="@branch.BranchID"> *@
@*                     <div class="card-body"> *@
@*                         <p class="card-text"><strong>Branch:</strong> @branch.Name</p> *@
@*                         <p class="card-text"><strong>Address:</strong> @branch.Address</p> *@
@*                         <p class="card-text"><strong>Contact:</strong> @branch.ContactNumber</p> *@
@*                         <p class="card-text"><strong>Distance:</strong> <span class="distance" data-lat="@branch.Latitude" data-lon="@branch.Longitude">Calculating...</span></p> *@
@*                     </div> *@
@*                 </div> *@
@*             } *@
@*         </div> *@
@*         <div class="map-container"> *@
@*             <div id="map" style="height: 400px;"></div> *@
@*         </div> *@
@*         <div class="route-container"> *@
@*             <div id="route-info" class="route-info"> *@
@*                 <p class="text-muted">Waiting for location...</p> *@
@*             </div> *@
@*         </div> *@
@*     } *@
@*     else *@
@*     { *@
@*         <div class="alert alert-info" role="alert"> *@
@*             <p class="no-branches">No branches found.</p> *@
@*         </div> *@
@*     } *@

@*     <div class="alert alert-danger error-message" id="error-message" style="display: none;"></div> *@

@*     <div class="action-buttons"> *@
@*         <a asp-action="ShowAllReservations" class="btn btn-primary" aria-label="Back to all reservations">Back to Reservations</a> *@
@*     </div> *@
@* </div> *@

@* @section Scripts { *@
@*     @Html.AntiForgeryToken() 
@*     <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
@*     <script src="~/lib/jquery/dist/jquery.min.js"></script> *@
@*     <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script> *@
@*     <script> *@
@*         var map = L.map('map').setView([30.0550, 31.0000], 11); *@
@*         L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { *@
@*             attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>', *@
@*             ariaLabel: 'Map showing branches and user location' *@
@*         }).addTo(map); *@

@*         var userMarker = null; *@
@*         var routeLayer = null; *@
@*         var stepMarkers = []; *@

@*         $(document).ready(function () { *@
@*             if (navigator.geolocation) { *@
@*                 navigator.geolocation.getCurrentPosition( *@
@*                     function (position) { *@
@*                         var userLat = position.coords.latitude; *@
@*                         var userLon = position.coords.longitude; *@

@*                         // Center map on user location *@
@*                         map.setView([userLat, userLon], 12); *@

@*                         // Add user marker *@
@*                         userMarker = L.marker([userLat, userLon], { *@
@*                             icon: L.divIcon({ *@
@*                                 className: 'user-marker', *@
@*                                 html: '<div style="background-color: #007bff; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;"></div>', *@
@*                                 iconSize: [15, 15] *@
@*                             }) *@
@*                         }).addTo(map) *@
@*                           .bindPopup('Your Location', { ariaLabel: 'Your current location' }).openPopup(); *@

@*                         // Add user location circle *@
@*                         L.circle([userLat, userLon], { *@
@*                             radius: 10000, *@
@*                             color: '#007bff', *@
@*                             fillOpacity: 0.1 *@
@*                         }).addTo(map); *@

@*                         // Process branches *@
@*                         var branches = @Html.Raw(Json.Serialize(Model.Branches)); *@
@*                         var nearestBranch = null; *@
@*                         var nearestDistance = Infinity; *@
@*                         var processedBranches = 0; *@

@*                         $('.distance').each(function () { *@
@*                             const branchLat = parseFloat($(this).data('lat')); *@
@*                             const branchLon = parseFloat($(this).data('lon')); *@
@*                             const branchId = $(this).closest('.branch-card').data('branch-id'); *@

@*                             // Add branch marker *@
@*                             L.marker([branchLat, branchLon]).addTo(map) *@
@*                                 .bindPopup(`${$(this).closest('.branch-card').find('.card-text strong').first().text().replace('Branch: ', '')}<br>${$(this).closest('.branch-card').find('.card-text').eq(1).text().replace('Address: ', '')}<br>${$(this).closest('.branch-card').find('.card-text').eq(2).text().replace('Contact: ', '')}`, { ariaLabel: `Branch: ${$(this).closest('.branch-card').find('.card-text strong').first().text().replace('Branch: ', '')}` }); *@

@*                             // Calculate distance using controller endpoint *@
@*                             $.ajax({ *@
@*                                 url: '/Reservation/CalculateDistance', *@
@*                                 type: 'POST', *@
@*                                 data: { *@
@*                                     lat1: userLat, *@
@*                                     lon1: userLon, *@
@*                                     lat2: branchLat, *@
@*                                     lon2: branchLon, *@
@*                                     __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() *@
@*                                 }, *@
@*                                 success: function (distance) { *@
@*                                     $(this).text(distance.toFixed(2) + ' km'); *@
@*                                     if (distance <= 10 && distance < nearestDistance) { *@
@*                                         nearestDistance = distance; *@
@*                                         nearestBranch = branches.find(b => b.BranchID === branchId); *@
@*                                         $('.branch-card').removeClass('nearest'); *@
@*                                         $(this).closest('.branch-card').addClass('nearest'); *@
@*                                     } *@
@*                                     processedBranches++; *@
@*                                     if (processedBranches === $('.distance').length && nearestBranch) { *@
@*                                         fetchRoute(userLat, userLon, nearestBranch.Latitude, nearestBranch.Longitude, nearestBranch); *@
@*                                     } else if (processedBranches === $('.distance').length && !nearestBranch) { *@
@*                                         $('#route-info').html('<div class="alert alert-warning" role="alert">No branches found within 10km.</div>'); *@
@*                                     } *@
@*                                 }.bind(this), *@
@*                                 error: function (xhr, status, error) { *@
@*                                     console.error('AJAX error:', status, error, xhr.responseText); *@
@*                                     $('#error-message').text('Unable to calculate distance. Please try again.').show(); *@
@*                                 } *@
@*                             }); *@
@*                         }); *@
@*                     }, *@
@*                     function (error) { *@
@*                         let errorMsg = 'Unable to fetch location. Please allow location access and try again.'; *@
@*                         if (error.code === error.PERMISSION_DENIED) { *@
@*                             errorMsg = 'Location access denied. Please enable location services.'; *@
@*                         } else if (error.code === error.POSITION_UNAVAILABLE) { *@
@*                             errorMsg = 'Location unavailable. Please check your device settings.'; *@
@*                         } else if (error.code === error.TIMEOUT) { *@
@*                             errorMsg = 'Location request timed out. Please try again.'; *@
@*                         } *@
@*                         $('#error-message').text(errorMsg).show(); *@
@*                     } *@
@*                 ); *@
@*             } else { *@
@*                 $('#error-message').text('Geolocation is not supported by your browser.').show(); *@
@*             } *@
@*         }); *@

@*         function fetchRoute(startLat, startLon, endLat, endLon, nearestBranch) { *@
@*             $('#route-info').html('<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>'); *@
@*             var apiKey = '5b3ce3597851110001cf6248bede1bf672b045fb88d11f7df6f8c1b9'; // Replace with your OpenRouteService API key *@
@*             var url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${startLon},${startLat}&end=${endLon},${endLat}`; *@

@*             fetch(url) *@
@*                 .then(response => response.json()) *@
@*                 .then(data => { *@
@*                     if (data.features && data.features.length > 0) { *@
@*                         if (routeLayer) map.removeLayer(routeLayer); *@
@*                         stepMarkers.forEach(marker => map.removeLayer(marker)); *@
@*                         stepMarkers = []; *@

@*                         var route = data.features[0].geometry.coordinates; *@
@*                         var routeLatLngs = route.map(coord => [coord[1], coord[0]]); *@
@*                         routeLayer = L.polyline(routeLatLngs, { color: '#28a745', weight: 5 }).addTo(map); *@

@*                         var steps = data.features[0].properties.segments[0].steps; *@
@*                         steps.forEach((step, index) => { *@
@*                             var stepCoord = routeLatLngs[step.way_points[0]]; *@
@*                             var marker = L.marker(stepCoord, { *@
@*                                 icon: L.divIcon({ *@
@*                                     className: 'step-marker', *@
@*                                     html: `<span>${index + 1}</span>`, *@
@*                                     iconSize: [20, 20] *@
@*                                 }) *@
@*                             }).addTo(map) *@
@*                               .bindPopup(`${step.instruction}<br>Distance: ${(step.distance / 1000).toFixed(2)} km`, { ariaLabel: `Step ${index + 1}` }); *@
@*                             stepMarkers.push(marker); *@
@*                         }); *@

@*                         map.fitBounds(routeLayer.getBounds()); *@

@*                         var googleMapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startLat},${startLon}&destination=${endLat},${endLon}&travelmode=driving`; *@
@*                         $('#route-info').html(` *@
@*                             <h4 class="card-title">${nearestBranch.Name}</h4> *@
@*                             <p><strong>Address:</strong> ${nearestBranch.Address}</p> *@
@*                             <p><strong>Contact:</strong> ${nearestBranch.ContactNumber}</p> *@
@*                             <p><strong>Distance:</strong> ${nearestDistance.toFixed(2)} km</p> *@
@*                             <a href="${googleMapsUrl}" target="_blank" class="btn btn-primary" aria-label="Open route in Google Maps">Navigate with Google Maps</a> *@
@*                         `); *@
@*                     } else { *@
@*                         $('#route-info').html('<div class="alert alert-warning" role="alert">No route found.</div>'); *@
@*                     } *@
@*                 }) *@
@*                 .catch(error => { *@
@*                     console.error('Error fetching route:', error); *@
@*                     $('#error-message').html('<div class="alert alert-danger" role="alert">Unable to fetch route. Please try again.</div>').show(); *@
@*                 }); *@
@*         } *@
@*     </script> *@
@* } *@

@* <style> *@
@*     body { *@
@*         background-image: url('https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?q=80&w=1920&auto=format&fit=crop'); *@
@*         background-size: cover; *@
@*         background-position: center; *@
@*         background-repeat: no-repeat; *@
@*         background-attachment: fixed; *@
@*         min-height: 100vh; *@
@*         margin: 0; *@
@*         display: flex; *@
@*         justify-content: center; *@
@*         align-items: center; *@
@*         position: relative; *@
@*         font-family: 'Georgia', serif; *@
@*     } *@

@*         body::before { *@
@*             content: ''; *@
@*             position: absolute; *@
@*             top: 0; *@
@*             left: 0; *@
@*             width: 100%; *@
@*             height: 100%; *@
@*             background: linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.2) 100%); *@
@*             z-index: 1; *@
@*         } *@

@*     .form-container { *@
@*         background: linear-gradient(135deg, #ffffff 0%, #f9f1e7 100%); *@
@*         padding: 2.5rem; *@
@*         border-radius: 15px; *@
@*         box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); *@
@*         max-width: 650px; *@
@*         width: 100%; *@
@*         position: relative; *@
@*         z-index: 2; *@
@*         margin: 2rem; *@
@*         border: 2px solid #d4a373; *@
@*         overflow: hidden; *@
@*     } *@

@*         .form-container::before { *@
@*             content: ''; *@
@*             position: absolute; *@
@*             top: -15px; *@
@*             left: -15px; *@
@*             right: -15px; *@
@*             height: 30px; *@
@*             background: linear-gradient(45deg, #d4a373 25%, transparent 25%, transparent 50%, #d4a373 50%, #d4a373 75%, transparent 75%, transparent); *@
@*             background-size: 40px 40px; *@
@*             z-index: 3; *@
@*         } *@

@*         .form-container::after { *@
@*             content: ''; *@
@*             position: absolute; *@
@*             bottom: -15px; *@
@*             left: -15px; *@
@*             right: -15px; *@
@*             height: 30px; *@
@*             background: linear-gradient(45deg, #d4a373 25%, transparent 25%, transparent 50%, #d4a373 50%, #d4a373 75%, transparent 75%, transparent); *@
@*             background-size: 40px 40px; *@
@*             z-index: 3; *@
@*         } *@

@*     h2 { *@
@*         color: #2f4f4f; *@
@*         text-align: center; *@
@*         font-size: 2rem; *@
@*         font-weight: 700; *@
@*         margin-bottom: 2rem; *@
@*         text-transform: uppercase; *@
@*         letter-spacing: 2px; *@
@*         position: relative; *@
@*     } *@

@*         h2::after { *@
@*             content: ''; *@
@*             position: absolute; *@
@*             bottom: -10px; *@
@*             left: 50%; *@
@*             transform: translateX(-50%); *@
@*             width: 50px; *@
@*             height: 3px; *@
@*             background: #d4a373; *@
@*         } *@

@*     .text-muted { *@
@*         color: #2f4f4f !important; *@
@*         font-size: 1.1rem; *@
@*         margin-bottom: 1.5rem; *@
@*         text-align: center; *@
@*     } *@

@*     .branch-card { *@
@*         background: rgba(255, 255, 255, 0.9); *@
@*         border: 2px solid #d4a373; *@
@*         border-radius: 8px; *@
@*         padding: 1.5rem; *@
@*         margin-bottom: 1.5rem; *@
@*         transition: box-shadow 0.3s; *@
@*     } *@

@*         .branch-card.nearest { *@
@*             border-color: #8b4513; *@
@*             box-shadow: 0 4px 12px rgba(139, 69, 19, 0.4); *@
@*         } *@

@*     .card-body { *@
@*         padding: 1rem; *@
@*     } *@

@*     .card-text { *@
@*         margin: 0.5rem 0; *@
@*         font-size: 1rem; *@
@*         color: #2f4f4f; *@
@*     } *@

@*         .card-text strong { *@
@*             font-weight: 600; *@
@*             color: #2f4f4f; *@
@*         } *@

@*     .alert-info { *@
@*         background-color: rgba(91, 192, 222, 0.1); *@
@*         border-left: 4px solid #5bc0de; *@
@*         border-radius: 5px; *@
@*         padding: 1rem; *@
@*         margin-bottom: 1.5rem; *@
@*         text-align: center; *@
@*     } *@

@*     .alert-warning { *@
@*         background-color: rgba(255, 193, 7, 0.1); *@
@*         border-left: 4px solid #d4a373; *@
@*         border-radius: 5px; *@
@*         padding: 1rem; *@
@*         margin-bottom: 1rem; *@
@*     } *@

@*     .alert-danger { *@
@*         background-color: rgba(139, 0, 0, 0.1); *@
@*         border-left: 4px solid #8b0000; *@
@*         border-radius: 5px; *@
@*         padding: 1rem; *@
@*         margin-bottom: 1.5rem; *@
@*         text-align: center; *@
@*         color: #8b0000; *@
@*         font-size: 1.1rem; *@
@*     } *@

@*     .no-branches { *@
@*         font-size: 1.1rem; *@
@*         color: #2f4f4f; *@
@*     } *@

@*     .action-buttons { *@
@*         display: flex; *@
@*         gap: 1rem; *@
@*         justify-content: center; *@
@*         margin-top: 2rem; *@
@*     } *@

@*     .btn-primary { *@
@*         background: linear-gradient(135deg, #d4a373 0%, #8b4513 100%); *@
@*         border: none; *@
@*         padding: 0.9rem 1.2rem; *@
@*         border-radius: 8px; *@
@*         font-size: 1rem; *@
@*         font-weight: 600; *@
@*         color: white; *@
@*         text-transform: uppercase; *@
@*         transition: transform 0.3s, box-shadow 0.3s; *@
@*     } *@

@*         .btn-primary:hover { *@
@*             transform: translateY(-2px); *@
@*             box-shadow: 0 4px 12px rgba(139, 69, 19, 0.4); *@
@*         } *@

@*     .map-container { *@
@*         width: 100%; *@
@*         margin-bottom: 2rem; *@
@*     } *@

@*     #map { *@
@*         height: 400px; *@
@*         border-radius: 8px; *@
@*         border: 2px solid #d4a373; *@
@*     } *@

@*     .route-container { *@
@*         width: 100%; *@
@*     } *@

@*     .route-info { *@
@*         background: rgba(255, 255, 255, 0.9); *@
@*         padding: 1.5rem; *@
@*         border-radius: 8px; *@
@*     } *@

@*         .route-info p { *@
@*             margin-bottom: 0.5rem; *@
@*             color: #2f4f4f; *@
@*         } *@

@*         .route-info h4 { *@
@*             color: #2f4f4f; *@
@*             font-size: 1.5rem; *@
@*             font-weight: 600; *@
@*             margin-bottom: 1rem; *@
@*         } *@

@*     .spinner { *@
@*         display: none; *@
@*         text-align: center; *@
@*         padding: 20px; *@
@*     } *@

@*     .spinner-border { *@
@*         border-color: #d4a373; *@
@*         border-right-color: transparent; *@
@*     } *@

@*     .user-marker div { *@
@*         animation: pulse 2s infinite; *@
@*     } *@

@*     @@keyframes pulse { *@
@*         0% *@

@*     { *@
@*         transform: scale(1); *@
@*     } *@

@*     50% { *@
@*         transform: scale(1.2); *@
@*     } *@

@*     100% { *@
@*         transform: scale(1); *@
@*     } *@

@*     } *@

@*     .step-marker span { *@
@*         display: inline-block; *@
@*         width: 20px; *@
@*         height: 20px; *@
@*         background-color: #dc3545; *@
@*         color: white; *@
@*         text-align: center; *@
@*         border-radius: 50%; *@
@*         font-weight: bold; *@
@*     } *@
@* </style> *@

@* @section Styles { *@
@*     <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" /> *@
@* } *@

@* @model Final_Project.Controllers.NearestBranchViewModel *@

@* @{ *@
@*     ViewData["Title"] = "Find Nearest Branch"; *@
@* } *@

@* <h2>Find Nearest Branch</h2> *@

@* <div class="row"> *@
@*     <div class="col-md-6"> *@
@*         <form id="findNearestBranchForm" asp-action="FindNearestBranch" method="get"> *@
@*             <div class="form-group"> *@
@*                 <label for="UserLatitude">Your Latitude</label> *@
@*                 <input type="number" step="any" class="form-control" id="UserLatitude" name="UserLatitude" value="@Model.UserLatitude" placeholder="Enter your latitude" required /> *@
@*             </div> *@
@*             <div class="form-group"> *@
@*                 <label for="UserLongitude">Your Longitude</label> *@
@*                 <input type="number" step="any" class="form-control" id="UserLongitude" name="UserLongitude" value="@Model.UserLongitude" placeholder="Enter your longitude" required /> *@
@*             </div> *@
@*             <button type="button" class="btn btn-primary" onclick="findNearestBranch()">Find Nearest Branch</button> *@
@*         </form> *@
@*     </div> *@
@* </div> *@

@* <hr /> *@

@* <h3>Branches</h3> *@
@* @if (Model.Branches == null || !Model.Branches.Any()) *@
@* { *@
@*     <p>No branches available.</p> *@
@* } *@
@* else *@
@* { *@
@*     <table class="table table-bordered" id="branchesTable"> *@
@*         <thead> *@
@*             <tr> *@
@*                 <th>Name</th> *@
@*                 <th>Address</th> *@
@*                 <th>Contact Number</th> *@
@*                 <th>Distance (km)</th> *@
@*             </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*             @foreach (var branch in Model.Branches) *@
@*             { *@
@*                 <tr data-branch-id="@branch.BranchID" data-lat="@branch.Latitude" data-lon="@branch.Longitude"> *@
@*                     <td>@branch.Name</td> *@
@*                     <td>@branch.Address</td> *@
@*                     <td>@branch.ContactNumber</td> *@
@*                     <td class="distance">N/A</td> *@
@*                 </tr> *@
@*             } *@
@*         </tbody> *@
@*     </table> *@

@*     <div id="nearestBranch" class="mt-3" style="display: none;"> *@
@*         <h4>Nearest Branch</h4> *@
@*         <p><strong>Name:</strong> <span id="nearestBranchName"></span></p> *@
@*         <p><strong>Address:</strong> <span id="nearestBranchAddress"></span></p> *@
@*         <p><strong>Contact Number:</strong> <span id="nearestBranchContact"></span></p> *@
@*         <p><strong>Distance:</strong> <span id="nearestBranchDistance"></span> km</p> *@
@*     </div> *@
@* } *@

@* @section Scripts { *@
@*     <script> *@
@*         function findNearestBranch() { *@
@*             var userLat = parseFloat(document.getElementById('UserLatitude').value); *@
@*             var userLon = parseFloat(document.getElementById('UserLongitude').value); *@

@*             if (isNaN(userLat) || isNaN(userLon)) { *@
@*                 alert('Please enter valid latitude and longitude values.'); *@
@*                 return; *@
@*             } *@

@*             var rows = document.querySelectorAll('#branchesTable tbody tr'); *@
@*             var minDistance = Number.MAX_VALUE; *@
@*             var nearestBranch = null; *@

@*             rows.forEach(function (row) { *@
@*                 var branchLat = parseFloat(row.getAttribute('data-lat')); *@
@*                 var branchLon = parseFloat(row.getAttribute('data-lon')); *@

@*                 fetch('/Reservation/CalculateDistance', { *@
@*                     method: 'POST', *@
@*                     headers: { *@
@*                         'Content-Type': 'application/json', *@
@*                         'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value *@
@*                     }, *@
@*                     body: JSON.stringify({ *@
@*                         lat1: userLat, *@
@*                         lon1: userLon, *@
@*                         lat2: branchLat, *@
@*                         lon2: branchLon *@
@*                     }) *@
@*                 }) *@
@*                 .then(response => response.json()) *@
@*                 .then(distance => { *@
@*                     if (typeof distance === 'number') { *@
@*                         row.querySelector('.distance').textContent = distance.toFixed(2); *@
@*                         if (distance < minDistance) { *@
@*                             minDistance = distance; *@
@*                             nearestBranch = { *@
@*                                 name: row.cells[0].textContent, *@
@*                                 address: row.cells[1].textContent, *@
@*                                 contact: row.cells[2].textContent, *@
@*                                 distance: distance.toFixed(2) *@
@*                             }; *@
@*                         } *@
@*                         updateNearestBranch(); *@
@*                     } *@
@*                 }) *@
@*                 .catch(error => { *@
@*                     console.error('Error calculating distance:', error); *@
@*                     row.querySelector('.distance').textContent = 'Error'; *@
@*                 }); *@
@*             }); *@

@*             function updateNearestBranch() { *@
@*                 if (nearestBranch) { *@
@*                     document.getElementById('nearestBranchName').textContent = nearestBranch.name; *@
@*                     document.getElementById('nearestBranchAddress').textContent = nearestBranch.address; *@
@*                     document.getElementById('nearestBranchContact').textContent = nearestBranch.contact; *@
@*                     document.getElementById('nearestBranchDistance').textContent = nearestBranch.distance; *@
@*                     document.getElementById('nearestBranch').style.display = 'block'; *@
@*                 } *@
@*             } *@
@*         } *@
@*     </script> *@
@* } *@


@model Final_Project.Controllers.NearestBranchViewModel

@{
    ViewData["Title"] = "Find Nearest Branch";
    Layout = null; // Remove default layout to exclude the sidebar
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Restaurant Reservation</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        /* Page background with restaurant image */
        body {
            background-image: url('https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?q=80&w=1920&auto=format&fit=crop');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
            min-height: 100vh;
            margin: 0;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            font-family: 'Georgia', serif; /* Elegant serif font */
        }

            /* Subtle overlay for twilight glow effect */
            body::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.2) 100%); /* Gradient overlay */
                z-index: 1;
            }

        /* Enhanced card container with gradient and shadow */
        .card-container {
            background: linear-gradient(135deg, #ffffff 0%, #f9f1e7 100%); /* Soft ivory gradient */
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 1200px;
            position: relative;
            z-index: 2;
            margin-bottom: 2rem;
            border: 2px solid #d4a373; /* Warm gold border */
            overflow: hidden;
        }

            /* Yellow zigzag border effect with refinement */
            .card-container::before {
                content: '';
                position: absolute;
                top: -15px;
                left: -15px;
                right: -15px;
                height: 30px;
                background: linear-gradient(45deg, #d4a373 25%, transparent 25%, transparent 50%, #d4a373 50%, #d4a373 75%, transparent 75%, transparent);
                background-size: 40px 40px;
                z-index: 3;
            }

            .card-container::after {
                content: '';
                position: absolute;
                bottom: -15px;
                left: -15px;
                right: -15px;
                height: 30px;
                background: linear-gradient(45deg, #d4a373 25%, transparent 25%, transparent 50%, #d4a373 50%, #d4a373 75%, transparent 75%, transparent);
                background-size: 40px 40px;
                z-index: 3;
            }

        /* Enhanced card title */
        .card-title {
            color: #2f4f4f; /* Dark slate gray for elegance */
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-transform: uppercase;
            letter-spacing: 2px;
            position: relative;
        }

            .card-title::after {
                content: '';
                position: absolute;
                bottom: -10px;
                left: 50%;
                transform: translateX(-50%);
                width: 50px;
                height: 3px;
                background: #d4a373;
            }

        /* Text muted */
        .text-muted {
            color: #2f4f4f !important;
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
        }

        /* Map and route info layout */
        .map-container, .route-container {
            width: 100%;
        }

        #map {
            height: 500px;
            border-radius: 8px;
            border: 2px solid #d4a373;
            margin-bottom: 2rem;
        }

        .route-info {
            background: rgba(255, 255, 255, 0.9);
            padding: 1.5rem;
            border-radius: 8px;
        }

            .route-info p {
                margin-bottom: 0.5rem;
                color: #2f4f4f;
            }

            .route-info h4 {
                color: #2f4f4f;
                font-size: 1.5rem;
                font-weight: 600;
                margin-bottom: 1rem;
            }

        /* Button styling */
        .btn-primary {
            background: linear-gradient(135deg, #d4a373 0%, #8b4513 100%);
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            color: white;
            text-transform: uppercase;
            transition: transform 0.3s, box-shadow 0.3s;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(139, 69, 19, 0.4);
            }

        /* Alerts */
        .alert-warning, .alert-danger {
            background-color: rgba(255, 193, 7, 0.1);
            border-left: 4px solid #d4a373;
            border-radius: 5px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .alert-danger {
            background-color: rgba(220, 53, 69, 0.1);
            border-left: 4px solid #dc3545;
        }

        /* Spinner */
        .spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .spinner-border {
            border-color: #d4a373;
            border-right-color: transparent;
        }

        /* User marker animation */
        .user-marker div {
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%

        {
            transform: scale(1);
        }

        50% {
            transform: scale(1.2);
        }

        100% {
            transform: scale(1);
        }

        }

        /* Step marker styling */
        .step-marker span {
            display: inline-block;
            width: 20px;
            height: 20px;
            background-color: #dc3545;
            color: white;
            text-align: center;
            border-radius: 50%;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="card-container">
        <h2 class="card-title">Find Nearest Branch</h2>
        <p class="text-muted">Enable location services to find the nearest branch.</p>

        <div class="map-container">
            <div id="map"></div>
        </div>
        <div class="route-container">
            <div id="route-info" class="route-info">
                <p class="text-muted">Waiting for location...</p>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    @* <script> *@
    @*     var map = L.map('map').setView([30.0550, 31.0000], 11); *@
    @*     L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { *@
    @*         attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>', *@
    @*         ariaLabel: 'Map showing branches and user location' *@
    @*     }).addTo(map); *@

    @*     var userMarker = null; *@
    @*     var routeLayer = null; *@
    @*     var stepMarkers = []; *@

    @*     function calculateDistance(lat1, lon1, lat2, lon2) { *@
    @*         var R = 6371; *@
    @*         var dLat = (lat2 - lat1) * Math.PI / 180; *@
    @*         var dLon = (lon2 - lon1) * Math.PI / 180; *@
    @*         var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + *@
    @*                 Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * *@
    @*                 Math.sin(dLon / 2) * Math.sin(dLon / 2); *@
    @*         var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); *@
    @*         return R * c; *@
    @*     } *@

    @*     function fetchRoute(startLat, startLon, endLat, endLon, nearestBranch) { *@
    @*         document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>'; *@
    @*         var apiKey = '5b3ce3597851110001cf6248bede1bf672b045fb88d11f7df6f8c1b9  '; // Replace with secure key management *@
    @*         var url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${startLon},${startLat}&end=${endLon},${endLat}`; *@

    @*         fetch(url) *@
    @*             .then(response => response.json()) *@
    @*             .then(data => { *@
    @*                 if (data.features && data.features.length > 0) { *@
    @*                     if (routeLayer) map.removeLayer(routeLayer); *@
    @*                     stepMarkers.forEach(marker => map.removeLayer(marker)); *@
    @*                     stepMarkers = []; *@

    @*                     var route = data.features[0].geometry.coordinates; *@
    @*                     var routeLatLngs = route.map(coord => [coord[1], coord[0]]); *@
    @*                     routeLayer = L.polyline(routeLatLngs, { color: '#28a745', weight: 5 }).addTo(map); *@

    @*                     var steps = data.features[0].properties.segments[0].steps; *@
    @*                     steps.forEach((step, index) => { *@
    @*                         var stepCoord = routeLatLngs[step.way_points[0]]; *@
    @*                         var marker = L.marker(stepCoord, { *@
    @*                             icon: L.divIcon({ *@
    @*                                 className: 'step-marker', *@
    @*                                 html: `<span>${index + 1}</span>`, *@
    @*                                 iconSize: [20, 20] *@
    @*                             }) *@
    @*                         }).addTo(map) *@
    @*                           .bindPopup(`${step.instruction}<br>Distance: ${(step.distance / 1000).toFixed(2)} km`, { ariaLabel: `Step ${index + 1}` }); *@
    @*                         stepMarkers.push(marker); *@
    @*                     }); *@

    @*                     map.fitBounds(routeLayer.getBounds()); *@

    @*                     var googleMapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startLat},${startLon}&destination=${endLat},${endLon}&travelmode=driving`; *@
    @*                     document.getElementById('route-info').innerHTML = ` *@
    @*                         <h4 class="card-title">${nearestBranch.name}</h4> *@
    @*                         <p><strong>Address:</strong> ${nearestBranch.address}</p> *@
    @*                         <p><strong>Contact:</strong> ${nearestBranch.contactNumber}</p> *@
    @*                         <p><strong>Distance:</strong> ${minDistance.toFixed(2)} km</p> *@
    @*                         <a href="${googleMapsUrl}" target="_blank" class="btn btn-primary" aria-label="Open route in Google Maps">Navigate with Google Maps</a> *@
    @*                     `; *@
    @*                 } else { *@
    @*                     document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No route found.</div>'; *@
    @*                 } *@
    @*             }) *@
    @*             .catch(error => { *@
    @*                 console.error('Error fetching route:', error); *@
    @*                 // document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to fetch route. Please try again.</div>'; *@
    @*             }); *@
    @*     } *@

    @*     if (navigator.geolocation) { *@
    @*         navigator.geolocation.getCurrentPosition(function(position) { *@
    @*             var userLat = position.coords.latitude; *@
    @*             var userLon = position.coords.longitude; *@

    @*             userMarker = L.marker([userLat, userLon], { *@
    @*                 icon: L.divIcon({ *@
    @*                     className: 'user-marker', *@
    @*                     html: '<div style="background-color: #007bff; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;"></div>', *@
    @*                     iconSize: [15, 15] *@
    @*                 }) *@
    @*             }).addTo(map) *@
    @*               .bindPopup('Your Location', { ariaLabel: 'Your current location' }).openPopup(); *@

    @*             L.circle([userLat, userLon], { *@
    @*                 radius: 10000, *@
    @*                 color: '#007bff', *@
    @*                 fillOpacity: 0.1 *@
    @*             }).addTo(map); *@

    @*             var branches = @Html.Raw(Json.Serialize(Model.Branches)); *@
    @*             var nearestBranch = null; *@
    @*             var minDistance = Infinity; *@

    @*             branches.forEach(function(branch) { *@
    @*                 var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude); *@
    @*                 if (distance <= 10 && distance < minDistance) { *@
    @*                     minDistance = distance; *@
    @*                     nearestBranch = branch; *@
    @*                 } *@
    @*                 L.marker([branch.latitude, branch.longitude]).addTo(map) *@
    @*                     .bindPopup(`${branch.name}<br>${branch.address}<br>${branch.contactNumber}`, { ariaLabel: `Branch: ${branch.name}` }); *@
    @*             }); *@

    @*             if (nearestBranch) { *@
    @*                 document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>'; *@
    @*                 fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch); *@
    @*             } else { *@
    @*                 document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No branches found within 10km.</div>'; *@
    @*             } *@

    @*             map.setView([userLat, userLon], 12); *@

    @*             navigator.geolocation.watchPosition(function(position) { *@
    @*                 userLat = position.coords.latitude; *@
    @*                 userLon = position.coords.longitude; *@

    @*                 if (userMarker) { *@
    @*                     userMarker.setLatLng([userLat, userLon]); *@
    @*                 } *@

    @*                 minDistance = Infinity; *@
    @*                 nearestBranch = null; *@

    @*                 branches.forEach(function(branch) { *@
    @*                     var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude); *@
    @*                     if (distance <= 10 && distance < minDistance) { *@
    @*                         minDistance = distance; *@
    @*                         nearestBranch = branch; *@
    @*                     } *@
    @*                 }); *@

    @*                 if (nearestBranch) { *@
    @*                     fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch); *@
    @*                 } *@
    @*             }, function(error) { *@
    @*                 console.error('Geolocation watch error:', error); *@
    @*                 document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to update location. Please check location settings.</div>'; *@
    @*             }, { *@
    @*                 enableHighAccuracy: true, *@
    @*                 timeout: 5000, *@
    @*                 maximumAge: 0 *@
    @*             }); *@
    @*         }, function() { *@
    @*             document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to retrieve your location. Please enable location services.</div>'; *@
    @*         }); *@
    @*     } else { *@
    @*         document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Geolocation is not supported by your browser.</div>'; *@
    @*     } *@
    @* </script> *@

    <script>
        var map = L.map('map').setView([30.0550, 31.0000], 11);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
            ariaLabel: 'Map showing branches and user location'
        }).addTo(map);

        var userMarker = null;
        var routeLayer = null;
        var stepMarkers = [];

        function calculateDistance(lat1, lon1, lat2, lon2) {
            var R = 6371;
            var dLat = (lat2 - lat1) * Math.PI / 180;
            var dLon = (lon2 - lon1) * Math.PI / 180;
            var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }

        function fetchRoute(startLat, startLon, endLat, endLon, nearestBranch, minDistance) {
            document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
            var apiKey = '5b3ce3597851110001cf6248bede1bf672b045fb88d11f7df6f8c1b9'; // Replace with secure key management
            var url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${startLon},${startLat}&end=${endLon},${endLat}`;

            console.log('Fetching route from:', url);
            console.log('Start:', startLat, startLon, 'End:', endLat, endLon, 'Branch:', nearestBranch);

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('API Response:', data);
                    if (data.features && data.features.length > 0) {
                        if (routeLayer) map.removeLayer(routeLayer);
                        stepMarkers.forEach(marker => map.removeLayer(marker));
                        stepMarkers = [];

                        var route = data.features[0].geometry.coordinates;
                        var routeLatLngs = route.map(coord => [coord[1], coord[0]]);
                        routeLayer = L.polyline(routeLatLngs, { color: '#28a745', weight: 5 }).addTo(map);

                        var steps = data.features[0].properties.segments[0].steps;
                        steps.forEach((step, index) => {
                            var stepCoord = routeLatLngs[step.way_points[0]];
                            var marker = L.marker(stepCoord, {
                                icon: L.divIcon({
                                    className: 'step-marker',
                                    html: `<span>${index + 1}</span>`,
                                    iconSize: [20, 20]
                                })
                            }).addTo(map)
                              .bindPopup(`${step.instruction}<br>Distance: ${(step.distance / 1000).toFixed(2)} km`, { ariaLabel: `Step ${index + 1}` });
                            stepMarkers.push(marker);
                        });

                        map.fitBounds(routeLayer.getBounds());

                        var googleMapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startLat},${startLon}&destination=${endLat},${endLon}&travelmode=driving`;
                        // Display branch info only after successful route fetch
                        document.getElementById('route-info').innerHTML = `
                            <h4 class="card-title">${nearestBranch.name}</h4>
                            <p><strong>Address:</strong> ${nearestBranch.address}</p>
                            <p><strong>Contact:</strong> ${nearestBranch.contactNumber}</p>
                            <p><strong>Distance:</strong> ${minDistance.toFixed(2)} km</p>
                            <a href="${googleMapsUrl}" target="_blank" class="btn btn-primary" aria-label="Open route in Google Maps">Navigate with Google Maps</a>
                        `;
                    } else {
                        document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No route found.</div>';
                    }
                })
                .catch(error => {
                    console.error('Error fetching route:', error);
                    document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to fetch route. Please try again.</div>';
                });
        }

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                var userLat = position.coords.latitude;
                var userLon = position.coords.longitude;
                console.log('User Location:', userLat, userLon);

                userMarker = L.marker([userLat, userLon], {
                    icon: L.divIcon({
                        className: 'user-marker',
                        html: '<div style="background-color: #007bff; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;"></div>',
                        iconSize: [15, 15]
                    })
                }).addTo(map)
                  .bindPopup('Your Location', { ariaLabel: 'Your current location' }).openPopup();

                L.circle([userLat, userLon], {
                    radius: 10000,
                    color: '#007bff',
                    fillOpacity: 0.1
                }).addTo(map);

                var branches = @Html.Raw(Json.Serialize(Model.Branches));
                console.log('Branches:', branches);
                var nearestBranch = null;
                var minDistance = Infinity;

                branches.forEach(function(branch) {
                    var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude);
                    console.log(`Branch: ${branch.name}, Distance: ${distance} km`);
                    if (distance <= 10 && distance < minDistance) {
                        minDistance = distance;
                        nearestBranch = branch;
                    }
                    L.marker([branch.latitude, branch.longitude]).addTo(map)
                        .bindPopup(`${branch.name}<br>${branch.address}<br>${branch.contactNumber}`, { ariaLabel: `Branch: ${branch.name}` });
                });

                if (nearestBranch) {
                    // Keep loading state until route is fetched
                    document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                    fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch, minDistance);
                } else {
                    document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No branches found within 10km.</div>';
                }

                map.setView([userLat, userLon], 12);

                navigator.geolocation.watchPosition(function(position) {
                    userLat = position.coords.latitude;
                    userLon = position.coords.longitude;
                    console.log('Updated Location:', userLat, userLon);

                    if (userMarker) {
                        userMarker.setLatLng([userLat, userLon]);
                    }

                    minDistance = Infinity;
                    nearestBranch = null;

                    branches.forEach(function(branch) {
                        var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude);
                        if (distance <= 10 && distance < minDistance) {
                            minDistance = distance;
                            nearestBranch = branch;
                        }
                    });

                    if (nearestBranch) {
                        // Keep loading state until route is fetched
                        document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                        fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch, minDistance);
                    } else {
                        document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No branches found within 10km.</div>';
                    }
                }, function(error) {
                    console.error('Geolocation watch error:', error.message, error.code);
                    document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to update location. Please check location settings.</div>';
                }, {
                    enableHighAccuracy: true,
                    timeout: 5000,
                    maximumAge: 0
                });
            }, function(error) {
                console.error('Geolocation error:', error.message, error.code);
                document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Geolocation error: ${error.message}</div>';
            });
        } else {
            document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Geolocation is not supported by your browser.</div>';
        }
    </script>
</body>
</html>