
@model Final_Project.Controllers.NearestBranchViewModel

@{
    ViewData["Title"] = "Find Nearest Branch";
    Layout = null; // Remove default layout to exclude the sidebar
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Restaurant Reservation</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        /* Page background with restaurant image */
        body {
            background-image: url('https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?q=80&w=1920&auto=format&fit=crop');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
            min-height: 100vh;
            margin: 0;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            font-family: 'Georgia', serif; /* Elegant serif font */
        }

            /* Subtle overlay for twilight glow effect */
            body::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.2) 100%); /* Gradient overlay */
                z-index: 1;
            }

        /* Enhanced card container with gradient and shadow */
        .card-container {
            background: linear-gradient(135deg, #ffffff 0%, #f9f1e7 100%); /* Soft ivory gradient */
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 1200px;
            position: relative;
            z-index: 2;
            margin-bottom: 2rem;
            border: 2px solid #d4a373; /* Warm gold border */
            overflow: hidden;
        }

            /* Yellow zigzag border effect with refinement */
            .card-container::before {
                content: '';
                position: absolute;
                top: -15px;
                left: -15px;
                right: -15px;
                height: 30px;
                background: linear-gradient(45deg, #d4a373 25%, transparent 25%, transparent 50%, #d4a373 50%, #d4a373 75%, transparent 75%, transparent);
                background-size: 40px 40px;
                z-index: 3;
            }

            .card-container::after {
                content: '';
                position: absolute;
                bottom: -15px;
                left: -15px;
                right: -15px;
                height: 30px;
                background: linear-gradient(45deg, #d4a373 25%, transparent 25%, transparent 50%, #d4a373 50%, #d4a373 75%, transparent 75%, transparent);
                background-size: 40px 40px;
                z-index: 3;
            }

        /* Enhanced card title */
        .card-title {
            color: #2f4f4f; /* Dark slate gray for elegance */
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-transform: uppercase;
            letter-spacing: 2px;
            position: relative;
        }

            .card-title::after {
                content: '';
                position: absolute;
                bottom: -10px;
                left: 50%;
                transform: translateX(-50%);
                width: 50px;
                height: 3px;
                background: #d4a373;
            }

        /* Text muted */
        .text-muted {
            color: #2f4f4f !important;
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
        }

        /* Map and route info layout */
        .map-container, .route-container {
            width: 100%;
        }

        #map {
            height: 500px;
            border-radius: 8px;
            border: 2px solid #d4a373;
            margin-bottom: 2rem;
        }

        .route-info {
            background: rgba(255, 255, 255, 0.9);
            padding: 1.5rem;
            border-radius: 8px;
        }

            .route-info p {
                margin-bottom: 0.5rem;
                color: #2f4f4f;
            }

            .route-info h4 {
                color: #2f4f4f;
                font-size: 1.5rem;
                font-weight: 600;
                margin-bottom: 1rem;
            }

        /* Button styling */
        .btn-primary {
            background: linear-gradient(135deg, #d4a373 0%, #8b4513 100%);
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            color: white;
            text-transform: uppercase;
            transition: transform 0.3s, box-shadow 0.3s;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(139, 69, 19, 0.4);
            }

        /* Alerts */
        .alert-warning, .alert-danger {
            background-color: rgba(255, 193, 7, 0.1);
            border-left: 4px solid #d4a373;
            border-radius: 5px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .alert-danger {
            background-color: rgba(220, 53, 69, 0.1);
            border-left: 4px solid #dc3545;
        }

        /* Spinner */
        .spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .spinner-border {
            border-color: #d4a373;
            border-right-color: transparent;
        }

        /* User marker animation */
        .user-marker div {
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%

        {
            transform: scale(1);
        }

        50% {
            transform: scale(1.2);
        }

        100% {
            transform: scale(1);
        }

        }

        /* Step marker styling */
        .step-marker span {
            display: inline-block;
            width: 20px;
            height: 20px;
            background-color: #dc3545;
            color: white;
            text-align: center;
            border-radius: 50%;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="card-container">
        <h2 class="card-title">Find Nearest Branch</h2>
        <p class="text-muted">Enable location services to find the nearest branch.</p>

        <div class="map-container">
            <div id="map"></div>
        </div>
        <div class="route-container">
            <div id="route-info" class="route-info">
                <p class="text-muted">Waiting for location...</p>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    

    <script>
        var map = L.map('map').setView([30.0550, 31.0000], 11);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
            ariaLabel: 'Map showing branches and user location'
        }).addTo(map);

        var userMarker = null;
        var routeLayer = null;
        var stepMarkers = [];

        function calculateDistance(lat1, lon1, lat2, lon2) {
            var R = 6371;
            var dLat = (lat2 - lat1) * Math.PI / 180;
            var dLon = (lon2 - lon1) * Math.PI / 180;
            var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }

        function fetchRoute(startLat, startLon, endLat, endLon, nearestBranch, minDistance) {
            document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
            var apiKey = '5b3ce3597851110001cf6248bede1bf672b045fb88d11f7df6f8c1b9'; // Replace with secure key management
            var url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${startLon},${startLat}&end=${endLon},${endLat}`;

            console.log('Fetching route from:', url);
            console.log('Start:', startLat, startLon, 'End:', endLat, endLon, 'Branch:', nearestBranch);

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('API Response:', data);
                    if (data.features && data.features.length > 0) {
                        if (routeLayer) map.removeLayer(routeLayer);
                        stepMarkers.forEach(marker => map.removeLayer(marker));
                        stepMarkers = [];

                        var route = data.features[0].geometry.coordinates;
                        var routeLatLngs = route.map(coord => [coord[1], coord[0]]);
                        routeLayer = L.polyline(routeLatLngs, { color: '#28a745', weight: 5 }).addTo(map);

                        var steps = data.features[0].properties.segments[0].steps;
                        steps.forEach((step, index) => {
                            var stepCoord = routeLatLngs[step.way_points[0]];
                            var marker = L.marker(stepCoord, {
                                icon: L.divIcon({
                                    className: 'step-marker',
                                    html: `<span>${index + 1}</span>`,
                                    iconSize: [20, 20]
                                })
                            }).addTo(map)
                              .bindPopup(`${step.instruction}<br>Distance: ${(step.distance / 1000).toFixed(2)} km`, { ariaLabel: `Step ${index + 1}` });
                            stepMarkers.push(marker);
                        });

                        map.fitBounds(routeLayer.getBounds());

                        var googleMapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startLat},${startLon}&destination=${endLat},${endLon}&travelmode=driving`;
                        // Display branch info only after successful route fetch
                        document.getElementById('route-info').innerHTML = `
                            <h4 class="card-title">${nearestBranch.name}</h4>
                            <p><strong>Address:</strong> ${nearestBranch.address}</p>
                            <p><strong>Contact:</strong> ${nearestBranch.contactNumber}</p>
                            <p><strong>Distance:</strong> ${minDistance.toFixed(2)} km</p>
                            <a href="${googleMapsUrl}" target="_blank" class="btn btn-primary" aria-label="Open route in Google Maps">Navigate with Google Maps</a>
                        `;
                    } else {
                        document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No route found.</div>';
                    }
                })
                .catch(error => {
                    console.error('Error fetching route:', error);
                    document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to fetch route. Please try again.</div>';
                });
        }

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                var userLat = position.coords.latitude;
                var userLon = position.coords.longitude;
                console.log('User Location:', userLat, userLon);

                userMarker = L.marker([userLat, userLon], {
                    icon: L.divIcon({
                        className: 'user-marker',
                        html: '<div style="background-color: #007bff; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;"></div>',
                        iconSize: [15, 15]
                    })
                }).addTo(map)
                  .bindPopup('Your Location', { ariaLabel: 'Your current location' }).openPopup();

                L.circle([userLat, userLon], {
                    radius: 10000,
                    color: '#007bff',
                    fillOpacity: 0.1
                }).addTo(map);

                var branches = @Html.Raw(Json.Serialize(Model.Branches));
                console.log('Branches:', branches);
                var nearestBranch = null;
                var minDistance = Infinity;

                branches.forEach(function(branch) {
                    var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude);
                    console.log(`Branch: ${branch.name}, Distance: ${distance} km`);
                    if (distance <= 10 && distance < minDistance) {
                        minDistance = distance;
                        nearestBranch = branch;
                    }
                    L.marker([branch.latitude, branch.longitude]).addTo(map)
                        .bindPopup(`${branch.name}<br>${branch.address}<br>${branch.contactNumber}`, { ariaLabel: `Branch: ${branch.name}` });
                });

                if (nearestBranch) {
                    // Keep loading state until route is fetched
                    document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                    fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch, minDistance);
                } else {
                    document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No branches found within 10km.</div>';
                }

                map.setView([userLat, userLon], 12);

                navigator.geolocation.watchPosition(function(position) {
                    userLat = position.coords.latitude;
                    userLon = position.coords.longitude;
                    console.log('Updated Location:', userLat, userLon);

                    if (userMarker) {
                        userMarker.setLatLng([userLat, userLon]);
                    }

                    minDistance = Infinity;
                    nearestBranch = null;

                    branches.forEach(function(branch) {
                        var distance = calculateDistance(userLat, userLon, branch.latitude, branch.longitude);
                        if (distance <= 10 && distance < minDistance) {
                            minDistance = distance;
                            nearestBranch = branch;
                        }
                    });

                    if (nearestBranch) {
                        // Keep loading state until route is fetched
                        document.getElementById('route-info').innerHTML = '<div class="spinner"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                        fetchRoute(userLat, userLon, nearestBranch.latitude, nearestBranch.longitude, nearestBranch, minDistance);
                    } else {
                        document.getElementById('route-info').innerHTML = '<div class="alert alert-warning" role="alert">No branches found within 10km.</div>';
                    }
                }, function(error) {
                    console.error('Geolocation watch error:', error.message, error.code);
                    document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Unable to update location. Please check location settings.</div>';
                }, {
                    enableHighAccuracy: true,
                    timeout: 5000,
                    maximumAge: 0
                });
            }, function(error) {
                console.error('Geolocation error:', error.message, error.code);
                document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Geolocation error: ${error.message}</div>';
            });
        } else {
            document.getElementById('route-info').innerHTML = '<div class="alert alert-danger" role="alert">Geolocation is not supported by your browser.</div>';
        }
    </script>
</body>
</html>